// Copyright 2023 StarkWare Industries Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License").
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.starkware.co/open-source-license/
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions
// and limitations under the License.

#ifndef STARKWARE_ALGEBRA_FFT_MULTIPLICATIVE_GROUP_ORDERING_H_
#define STARKWARE_ALGEBRA_FFT_MULTIPLICATIVE_GROUP_ORDERING_H_

namespace starkware {

/*
  A cyclic MultiplicativeGroup generated by w can be enumerated in various ways.
  For our purpose the interesting ones are NaturalOrder - [1, w, w^2, w^3, ...] and
  BitReversedOrder [1, -1, w^{N/4}, -w^{N/4} ...] = [w^{bitrev(0)}, w^{bitrev(1)},w^{ bitrev(2), ..]

  Diffrent FFT implementations have diffrent ordering requirements on the polynomial evaluations.
  This enum can be used to indicate which one is expected.

  Note that a polynomial evaluation is the output of and FFT and the input to the IFFT.
  Since in-place radix2 fft implemenations have the side effect of BitReversal Permuation,
  The order of polynomial coefficents (== ifft output) will typically be the mirror order
  to the order of the evaluation.
  However in some cases we might prefer some other ordering, so one should look at the specific
  implementation one is using.
  For example, in our use case if we do 4 step BitReversed FFT, it is better to omit the transpose
  operation at the end of the IFFT and beginning of the FFT. The omission will result in transposed
  natural ordering of the polynomial coefficients.
*/
enum class MultiplicativeGroupOrdering { kNaturalOrder, kBitReversedOrder };

}  // namespace starkware

#endif  // STARKWARE_ALGEBRA_FFT_MULTIPLICATIVE_GROUP_ORDERING_H_
