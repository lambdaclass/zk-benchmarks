#! This program creates verifiable shares for a Shamir secret sharing scheme.
#! This involves generation of random polynomial coefficients and 
#! polynomial evaluation in the prime field.  The dealer generates shares 
#! independently such that they can be distributed independently. The same
#! secret, random seed and k value must be used to create all shares.
#! A secret commitment is also included in the output such that shareholders
#! can verify they all have a share associated with the same secret.
#! This is a demo and is not secure.
#!
#! Input:
#! Stack: [x, k] 
#! The x coordinate for which we want to generate a share, number of shares  needed to 
#! reconstruct secret - this defines the degree of the polynomial.
#! Advice Tape: [secret, rand]
#! The secret, a random field element.
#!
#! Output:
#! Stack: [x_coord, y_coord, com_3, com_2, com_1, com_0]
#! The share x coordinate, the share y coordinate, secret commitment 
#!
#! Suggested Improvements:
#! - Currently only takes a single field element as a random seed - should be increased to a word.
#! - Migrate to a more secure random number generation algorithm for polynomial coefficient generation.
#! - Allow arbitrary secret size of size n.  This would require generation of n polynomials.
#! - Instead of computing x^i for each iteration, store x^i in a variable and multiply by x to get next exponent.


# create secret commitment (hash of secret + rand)
proc.gen_secret_com
    # input: [secret, rand]
    padw
    push.0.0      #[0, 0, 0, 0, 0, 0, secret, rand]
    hmerge        #[com_3, com_2, com_1, com_0]
end

# create k-1 random polynomial coefficients
proc.gen_poly_coeffs
    # input [k, rand]

    # generate initial 4 random coefficients from rand
    # coef_0 = secret
    swap    #[rand, k]
    padw    #[0, 0, 0, 0, rand, k]
    padw    #[0, 0, 0, 0, 0, 0, 0, 0, rand, k]
    drop    #[0, 0, 0, 0, 0, 0, 0, rand, k]
    hmerge  #[coef_4, coef_3, coef_2, coef_1, k]

    # introduce counter and evaluate if we have enough coefficients
    # counter is initialized to 5 as we must account for the secret which acts as the intercept
    push.5  #[counter, coef_4, coef_3, coef_2, coef_1, k]
    movup.5 #[k, counter, coef_4, coef_3, coef_2, coef_1]
    dup.1
    dup.1
    lt

    # continue creating more coefficients until we have enough (created in 4's)
    while.true     #[k, counter, coef_4, coef_3, coef_2, coef_1]
        # generate more coefficients by padding and hashing previous coefficients
        movdn.5
        movdn.5
        dupw       #[coef_4, coef_3, coef_2, coef_1, coef_4, coef_3, coef_2, coef_1, k, counter, ...]
        padw       #[0, 0, 0, 0, coef_4, coef_3, coef_2, coef_1, coef_4, coef_3, coef_2, coef_1, k, counter]
        hmerge     #[coef_8, coef_7, coef_6, coef_5, coef_4, coef_3, coef_2, coef_1, k, counter, ...]

        # evaluate if we have enough coefficients
        movup.9
        add.4
        movup.9
        dup.1
        dup.1
        lt
    end         #[k, counter, coef_(k-1), ...]
    
    # evaluate if we have too many coefficients
    dup          #[k, k, counter, coef_(k-1), ...]
    movdn.2      #[k, counter, k, coef_(k-1), ...]
    sub          #[diff, k, coef_(k-1), ...]
    dup          #[diff, diff, k, coef_(k-1), ...]
    push.0       #[0, diff, diff, k, coef_(k-1), ...]
    gt           #[1, diff, k, coef_(k-1)] 

    # drop unrequired coefficients such that we have k in total
    while.true #[diff, k, coef_(k-1)]
        movup.2
        drop
        sub.1
        dup
        push.0
        gt
    end

    drop
end

# evaluate polynomial
proc.eval_poly
    #[x, k, coef_(k-1),...]

    # introduce sum variable to calculate y
    swap    #[k, x, coef_(k-1), ..., secret]
    push.0  #[sum, k, x, coef_(k-1), ..., secret]
    push.1  #[1, sum, k, x, coef_(k-1), ..., secret]

    # evaluate polynomial by iterating through terms and summing
    while.true 
        dup.2 #[x, sum, k, x, coef_(k-1),..., secret]
        dup.2 #[k, x, sum, k, x, coef_(k-1),..., secret]
        sub.1 #[k-1, x, sum, k, x, coef_(k-1),..., secret]
        exp   #[x^(k-1), sum, k, x, coef_(k-1),..., secret]
        movup.4 #[coef_(k-1), x^(k-1), sum, k, x,..., secret]
        mul
        add
        swap
        sub.1
        dup
        movdn.2
        push.0
        gt
    end

    # clean up
    swap
    drop
    swap
end


begin
                                     #[x, k]
    # store x in mem + fetch advice data
    mem_store.0                      #[k]
    adv_push.2                       #[rand, secret, k]
    
    # generate secret com from rand + secret
    dup                              #[rand, rand, secret, k]
    dup.2                            #[secret, rand, rand, secret, k]
    exec.gen_secret_com              #[com_3, com_2, com_1, com_0, rand, secret, k]

    # move com down stack and gen polynomial coefficients
    swapw                            #[rand, secret, k, 0, com_3, com_2, com_1, com_0]
    movup.2                          #[k, rand, secret, 0, com_3, com_2, com_1, com_0]
    exec.gen_poly_coeffs             #[k, coef_(k-1), coef_(k-2), ..., secret, 0, com_3, com_2,com_1, com_0]

    # load x from mem and generate Shamir share
    mem_load.0                       #[x, k, coef_(k-1), coef_(k-2), ..., secret, 0, com_3, com_2,com_1, com_0]
    exec.eval_poly                   #[x, y, 0, com_3, com_2, com_1, com_0]
    movup.2
    drop
                                     #[x, y, com_3, com_2, com_1, com_0]
end
