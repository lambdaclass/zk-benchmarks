#! Computes the nth Catalan number using dynamic programming.
#! (See https://www.geeksforgeeks.org/program-nth-catalan-number/)
#! 
#! Definition:
#!     C_0 = 1
#!     C_(n+1) = C_0 * C_n + C_1 * C_(n-1) + ... + C_n * C_0
#!             =  2 * C_0 * C_n + 2 * C_1 * C_(n-1) + ... + 2 * C_(n/2) * C_(n/2+1) (if n+1 is even)
#!             or 2 * C_0 * C_n + 2 * C_1 * C_(n-1) + ... + C_(n/2)^2               (if n+1 is odd)
#! 
#! Input: The stack should contain a single element n.
#! Output: A stack with a single element which is the nth Catalan number C_n.
#! 
#! C_i for 0 <= i <= n will be stored in memory at address i.
#! 
#! example:
#! 
#! input:
#! [9]
#! 
#! output:
#! [4862]

#! Check if the counter is less than the maximum
proc.check_continue_neq
    # [i, max]
    dup.1
    dup.1
    neq
    # [ i != max , i, max ]
end

#! Fetch precomputed C_j and C_(i-j), and multiply them
proc.fetch_and_multiply
    # stack : [ i, j, ... ], mem : [ C_0, C_1, ..., C_i ]
    # Fetch C_(i-j)
    dup.1
    sub
    mem_load
    # Fetch C_j
    swap
    mem_load
    # Multiply
    mul
    # [ C_j * C_(i-j), ... ]
end

#! Calculate C_i.
#! Assumes that all C_j for j < i have already been calculated and stored in memory
proc.catalan_i
    # stack : [ i, ... ], mem : [ C_0, C_1, ..., C_(i-1) ]
    dup
    push.0
    eq
    if.true
        # Base case: C_0 = 1
        # [ 0, ... ]
        push.1
    else
        # Induction case: C_i = C_(k+1)
        # [ i, ... ]
        dup
        sub.1
        # [ k, i, ... ]
        # Initialize running total
        push.0
        # [ running_total, k, i, ... ]
        # Initialize maximum for counter (k/2)
        dup.1
        # Need to use u32 division to truncate properly
        # Safe to use unchecked, since k < i <= n+1, and n+1 has been asserted as u32
        u32unchecked_div.2
        # [ k/2, running_total, k, i, ... ]
        # Initialize counter
        push.0
        # [ j, k/2, running_total, k, i, ... ]
        # Calculate sum until penultimate summand
        exec.check_continue_neq
        while.true
            dup
            dup.4
            exec.fetch_and_multiply
            # [ C_j * C_(k-j), j, k/2, running_total, k, i, ... ]
            # Add 2 * C_j * C_(k-j) to running total
            mul.2
            movup.3
            add
            movdn.2
            # [ j, k/2, new running_total, k, i, ... ]
            # Update counter and check for termination
            add.1
            exec.check_continue_neq
        end
        # [ k/2, k/2, running_total, k, i, ... ]
        # Check if k is odd ( = i is even )
        dup.3
        dup.1
        # [ k/2, k, k/2, k/2, running_total, k, i, ... ]
        sub
        eq
        if.true
            # k is even ( = i is odd )
            # [ k/2, running_total, k, i, ... ]
            mem_load
            dup
            mul
            add
        else
            # k is odd ( = i is even )
            # [ k/2, running_total, k, i, ... ]
            dup.2
            exec.fetch_and_multiply
            mul.2
            add
        end
        # k is no longer needed
        swap
        drop
    end
    # stack : [ C_i, i, ... ], mem : [ C_0, C_1, ..., C_(i-1) ]
    swap
    mem_store
    # stack : [ ... ], mem : [ C_0, C_1, ..., C_i ]
end

begin
    # [ n ]
    # Validate n as u32. This ensures that the counter
    # (which is always less than n+1) can be used for u32 division
    # on the counter and to access memory without going out of bounds 
    u32assert
    add.1

    # counters are now guaranteed to be u32
    # initialize counter i
    push.0

    # [ 0, n + 1 ]
    exec.check_continue_neq
    while.true
        # [ i, n + 1 ]
        dup
        exec.catalan_i
        # [ i, n + 1 ]
        add.1
        exec.check_continue_neq
    end    
    # [ n + 1, n + 1 ]
    drop
    sub.1
    mem_load
end
